/* 
JavaScript logic of the player:
The logic of the player is defined in the JavaScript file. There are several 
functions that work together to handle all the functions of the player.
Step 1: Defining all the variables and accessing the HTML elements 
The required elements in the HTML layout that are to be dynamically changed are 
first selected using the querySelector() method. They are then assigned variable 
names so that they could be accessed and modified. Other variables that would be 
accessed throughout the program are also defined.
*/

// Select all the elements in the HTML page
// and assign them to a variable
let now_playing = document.querySelector(".now-playing");
let track_art = document.querySelector(".track-art");
let track_name = document.querySelector(".track-name");
let track_artist = document.querySelector(".track-artist");

let playpause_btn = document.querySelector(".playpause-track");
let next_btn = document.querySelector(".next-track");
let prev_btn = document.querySelector(".prev-track");

let seek_slider = document.querySelector(".seek_slider");
let volume_slider = document.querySelector(".volume_slider");
let curr_time = document.querySelector(".current-time");
let total_duration = document.querySelector(".total-duration");

// Specify globally used values
let track_index = 0;
let isPlaying = false;
let updateTimer;

// Create the audio element for the player
let curr_track = document.createElement('audio');

// Define the list of tracks that have to be played
let track_list = [
{
	name: "Kolo",
	artist: "Elnissi",
	image: "KoloCoverArt.png",
	path: "kolo.mp3"
},
{
	name: "Emily",
	artist: "Elnissi",
	image: "EmilyCoverArt.png",
	path: "Emily.mp3"
},
{
	name: "Posting",
	artist: "Elnissi",
	image: "Image URL",
	path: "POSTING.mp3",
},
];

/*
Step 2: Loading a new track from the tracklist 
All the tracks that have to be played are defined in the tracklist as objects. 
These objects contain properties like the name, artist, image and path to the 
track. Each of the tracks can then be accessed using its track index.
To load a track, a function loadTrack() is defined which handles the following 
things: 

Reset all the values of the previous track 
A resetValues() function is created which handles the resetting of the duration 
value and the slider to their initial values before a new track starts. This 
prevents the jumping of the seek slider while the new track loads.
Loading the track 
The audio element is assigned a new source using its src property. It may be given
any path from the filesystem or a URL. The load() method is then used on the audio
element to get the track ready.
Updating the track art to be shown 
The track art is fetched from the array and assigned with the help of the 
backgroundImage property.
Updating the track details to be shown 
The track details are fetched from the array and assigned with the help of the 
textContent property.
Adding event listeners to the track 
The media element has two event listeners added to it, the first one to update the
current seek position and the second one to load the next track when the current 
track finishes.
Setting a random colored background 
A coloured background is generated by randomising the red, green and blue values 
used and setting it as a color. The effect is animated by using the transition 
property on the background-color.
*/

function loadTrack(track_index) {
    // Clear the previous seek timer
    clearInterval(updateTimer);
    resetValues();
    
    // Load a new track
    curr_track.src = track_list[track_index].path;
    curr_track.load();
    
    // Update details of the track
    track_art.style.backgroundImage =
        "url(" + track_list[track_index].image + ")";
    track_name.textContent = track_list[track_index].name;
    track_artist.textContent = track_list[track_index].artist;
    now_playing.textContent =
        "PLAYING " + (track_index + 1) + " OF " + track_list.length;
    
    // Set an interval of 1000 milliseconds
    // for updating the seek slider
    updateTimer = setInterval(seekUpdate, 1000);
    
    // Move to the next track if the current finishes playing
    // using the 'ended' event
    curr_track.addEventListener("ended", nextTrack);
    
    // Apply a random background color
    random_bg_color();
    }
    
    function random_bg_color() {
    // Get a random number between 64 to 256
    // (for getting lighter colors)
    let red = Math.floor(Math.random() * 256) + 64;
    let green = Math.floor(Math.random() * 256) + 64;
    let blue = Math.floor(Math.random() * 256) + 64;
    
    // Construct a color with the given values
    let bgColor = "rgb(" + red + ", " + green + ", " + blue + ")";
    
    // Set the background to the new color
    document.body.style.background = bgColor;
    }
    
    // Function to reset all values to their default
    function resetValues() {
    curr_time.textContent = "00:00";
    total_duration.textContent = "00:00";
    seek_slider.value = 0;
    }
/*
Step 3: Configuring the player buttons 
A function playTrack() handles the playing of the currently loaded track. The 
play() method of the HTMLMediaElement API is used for this function. The icon of 
the button also changes to the pause icon. This is done by using one of the icons
 from the FontAwesome library and inserting it using innerHTML.
A function pauseTrack() handles the playing of the currently loaded track. The 
pause() method of the HTMLMediaElement API is used for this function. The icon of
 the button also changes back to the play icon. This is done by using one of the 
 icons from the FontAwesome library and inserting it using innerHTML.
These two functions are invoked depending on whether the track is currently 
playing or not. The playpause() function handles the actual play/pause control of
 the track. 
A function prevTrack() handles the loading of the previous track and moving the 
index backward. The index is reset to the last track when the index reaches the 
first track. The loadTrack() method defined above is used for loading the new 
track.
Similarly, a function nextTrack() handles the loading of the next track and 
moving the index forward. The index is reset to the first track when the index 
reaches the last track. The loadTrack() method defined above is used for loading 
the new track.
*/    
function playpauseTrack() {
    // Switch between playing and pausing
    // depending on the current state
    if (!isPlaying) playTrack();
    else pauseTrack();
    }
    
    function playTrack() {
    // Play the loaded track
    curr_track.play();
    isPlaying = true;
    
    // Replace icon with the pause icon
    playpause_btn.innerHTML = '<i class="fa fa-pause-circle fa-5x"></i>';
    }
    
    function pauseTrack() {
    // Pause the loaded track
    curr_track.pause();
    isPlaying = false;
    
    // Replace icon with the play icon
    playpause_btn.innerHTML = '<i class="fa fa-play-circle fa-5x"></i>';
    }
    
    function nextTrack() {
    // Go back to the first track if the
    // current one is the last in the track list
    if (track_index < track_list.length - 1)
        track_index += 1;
    else track_index = 0;
    
    // Load and play the new track
    loadTrack(track_index);
    playTrack();
    }
    
    function prevTrack() {
    // Go back to the last track if the
    // current one is the first in the track list
    if (track_index > 0)
        track_index -= 1;
    else track_index = track_list.length - 1;
    
    // Load and play the new track
    loadTrack(track_index);
    playTrack();
    }

/* 
Step 4: Configuring the sliders portion
We will be setting up two sliders that control the seek slider and the volume 
slider.
 

The seek slider 
The seek slider shows the current playback position on a slider by updating it 
with the current time of the track. A new function is created seekUpdate() which
 handles the updating of the seek slider relative to the current time of the track.
The seek slider position is calculated and set using the value property. 
Now, this function has to be called every time the track progresses further. This 
can be done by scheduling it to be updated every second. This can be done using 
the setInterval() method with an interval of 1000 milliseconds. This timer is 
cleared every time a new track is loaded.
This function also handles the changing of the time elapsed and the total duration
of the track, which is updated every time this function fires. The minutes and the
seconds are separately calculated and properly formatted to be displayed. 
 
The volume slider 
The volume slider is used to display an set the current volume of the track. A new
function is created setVolume() which handles the setting of the volume slider 
whenever the user changes it. 
*/    
function seekTo() {
    // Calculate the seek position by the
    // percentage of the seek slider
    // and get the relative duration to the track
    seekto = curr_track.duration * (seek_slider.value / 100);
    
    // Set the current track position to the calculated seek position
    curr_track.currentTime = seekto;
    }
    
    function setVolume() {
    // Set the volume according to the
    // percentage of the volume slider set
    curr_track.volume = volume_slider.value / 100;
    }
    
    function seekUpdate() {
    let seekPosition = 0;
    
    // Check if the current track duration is a legible number
    if (!isNaN(curr_track.duration)) {
        seekPosition = curr_track.currentTime * (100 / curr_track.duration);
        seek_slider.value = seekPosition;
    
        // Calculate the time left and the total duration
        let currentMinutes = Math.floor(curr_track.currentTime / 60);
        let currentSeconds = Math.floor(curr_track.currentTime - currentMinutes * 60);
        let durationMinutes = Math.floor(curr_track.duration / 60);
        let durationSeconds = Math.floor(curr_track.duration - durationMinutes * 60);
    
        // Add a zero to the single digit time values
        if (currentSeconds < 10) { currentSeconds = "0" + currentSeconds; }
        if (durationSeconds < 10) { durationSeconds = "0" + durationSeconds; }
        if (currentMinutes < 10) { currentMinutes = "0" + currentMinutes; }
        if (durationMinutes < 10) { durationMinutes = "0" + durationMinutes; }
    
        // Display the updated duration
        curr_time.textContent = currentMinutes + ":" + currentSeconds;
        total_duration.textContent = durationMinutes + ":" + durationSeconds;
    }
    }
/* 
Step 5: Starting the player
The first track is loaded by calling the loadTrack() function. This will load the
first track from the tracklist and update all the details of the track. The user 
can then start playing the track using the play button. The previous and next 
track button would load the previous and next track respectively and start playing
them.
The next track is automatically loaded when a track finishes playing. The user can
seek to a position in the track using the seek slider. The volume can also be 
adjusted using the volume slider.
*/    

// Load the first track in the tracklist
loadTrack(track_index);
